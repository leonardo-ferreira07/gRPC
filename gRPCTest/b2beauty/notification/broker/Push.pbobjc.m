// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: b2beauty/notification/broker/push.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import <B2Beauty-ProtoRPC/Push.pbobjc.h>
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PushRoot

@implementation PushRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PushRoot_FileDescriptor

static GPBFileDescriptor *PushRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"b2beauty.notification.broker"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Push

@implementation Push

@dynamic platform;
@dynamic priority;
@dynamic to;
@dynamic message;
@dynamic data_p, data_p_Count;

typedef struct Push__storage_ {
  uint32_t _has_storage_[1];
  Push_Platform platform;
  Push_Priority priority;
  NSString *to;
  NSString *message;
  NSMutableDictionary *data_p;
} Push__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "platform",
        .dataTypeSpecific.enumDescFunc = Push_Platform_EnumDescriptor,
        .number = Push_FieldNumber_Platform,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Push__storage_, platform),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "priority",
        .dataTypeSpecific.enumDescFunc = Push_Priority_EnumDescriptor,
        .number = Push_FieldNumber_Priority,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Push__storage_, priority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = Push_FieldNumber_To,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Push__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = Push_FieldNumber_Message,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Push__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = Push_FieldNumber_Data_p,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Push__storage_, data_p),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Push class]
                                     rootClass:[PushRoot class]
                                          file:PushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Push__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Push_Platform_RawValue(Push *message) {
  GPBDescriptor *descriptor = [Push descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Push_FieldNumber_Platform];
  return GPBGetMessageInt32Field(message, field);
}

void SetPush_Platform_RawValue(Push *message, int32_t value) {
  GPBDescriptor *descriptor = [Push descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Push_FieldNumber_Platform];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t Push_Priority_RawValue(Push *message) {
  GPBDescriptor *descriptor = [Push descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Push_FieldNumber_Priority];
  return GPBGetMessageInt32Field(message, field);
}

void SetPush_Priority_RawValue(Push *message, int32_t value) {
  GPBDescriptor *descriptor = [Push descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Push_FieldNumber_Priority];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum Push_Priority

GPBEnumDescriptor *Push_Priority_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Normal\000High\000";
    static const int32_t values[] = {
        Push_Priority_Normal,
        Push_Priority_High,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Push_Priority)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Push_Priority_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Push_Priority_IsValidValue(int32_t value__) {
  switch (value__) {
    case Push_Priority_Normal:
    case Push_Priority_High:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Push_Platform

GPBEnumDescriptor *Push_Platform_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Ios\000Android\000";
    static const int32_t values[] = {
        Push_Platform_Ios,
        Push_Platform_Android,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Push_Platform)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Push_Platform_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Push_Platform_IsValidValue(int32_t value__) {
  switch (value__) {
    case Push_Platform_Ios:
    case Push_Platform_Android:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PushReply

@implementation PushReply

@dynamic id_p;

typedef struct PushReply__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} PushReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PushReply_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PushReply__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PushReply class]
                                     rootClass:[PushRoot class]
                                          file:PushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PushReply__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
