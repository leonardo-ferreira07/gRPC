// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: b2beauty/geofencing/geofencing.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import <B2Beauty-ProtoRPC/Geofencing.pbobjc.h>
 #import <B2Beauty-ProtoRPC/Location.pbobjc.h>
 #import <B2Beauty-ProtoRPC/DevicePlatform.pbobjc.h>
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - B2BGeofencingGeofencingRoot

@implementation B2BGeofencingGeofencingRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - B2BGeofencingGeofencingRoot_FileDescriptor

static GPBFileDescriptor *B2BGeofencingGeofencingRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"b2beauty.geofencing"
                                                 objcPrefix:@"B2BGeofencing"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum B2BGeofencingTransition

GPBEnumDescriptor *B2BGeofencingTransition_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Enter\000Dwell\000Exit\000";
    static const int32_t values[] = {
        B2BGeofencingTransition_Enter,
        B2BGeofencingTransition_Dwell,
        B2BGeofencingTransition_Exit,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(B2BGeofencingTransition)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:B2BGeofencingTransition_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL B2BGeofencingTransition_IsValidValue(int32_t value__) {
  switch (value__) {
    case B2BGeofencingTransition_Enter:
    case B2BGeofencingTransition_Dwell:
    case B2BGeofencingTransition_Exit:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - B2BGeofencingCreateEventRequest

@implementation B2BGeofencingCreateEventRequest

@dynamic platform;
@dynamic hasLocation, location;
@dynamic transition;
@dynamic name;
@dynamic userId;
@dynamic businessId;
@dynamic appointmentId;

typedef struct B2BGeofencingCreateEventRequest__storage_ {
  uint32_t _has_storage_[1];
  B2BTypeDevicePlatform platform;
  B2BGeofencingTransition transition;
  B2BTypeLocation *location;
  NSString *name;
  NSString *userId;
  NSString *businessId;
  NSString *appointmentId;
} B2BGeofencingCreateEventRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "platform",
        .dataTypeSpecific.enumDescFunc = B2BTypeDevicePlatform_EnumDescriptor,
        .number = B2BGeofencingCreateEventRequest_FieldNumber_Platform,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(B2BGeofencingCreateEventRequest__storage_, platform),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(B2BTypeLocation),
        .number = B2BGeofencingCreateEventRequest_FieldNumber_Location,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(B2BGeofencingCreateEventRequest__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transition",
        .dataTypeSpecific.enumDescFunc = B2BGeofencingTransition_EnumDescriptor,
        .number = B2BGeofencingCreateEventRequest_FieldNumber_Transition,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(B2BGeofencingCreateEventRequest__storage_, transition),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = B2BGeofencingCreateEventRequest_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(B2BGeofencingCreateEventRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = B2BGeofencingCreateEventRequest_FieldNumber_UserId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(B2BGeofencingCreateEventRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "businessId",
        .dataTypeSpecific.className = NULL,
        .number = B2BGeofencingCreateEventRequest_FieldNumber_BusinessId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(B2BGeofencingCreateEventRequest__storage_, businessId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appointmentId",
        .dataTypeSpecific.className = NULL,
        .number = B2BGeofencingCreateEventRequest_FieldNumber_AppointmentId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(B2BGeofencingCreateEventRequest__storage_, appointmentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[B2BGeofencingCreateEventRequest class]
                                     rootClass:[B2BGeofencingGeofencingRoot class]
                                          file:B2BGeofencingGeofencingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(B2BGeofencingCreateEventRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t B2BGeofencingCreateEventRequest_Platform_RawValue(B2BGeofencingCreateEventRequest *message) {
  GPBDescriptor *descriptor = [B2BGeofencingCreateEventRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:B2BGeofencingCreateEventRequest_FieldNumber_Platform];
  return GPBGetMessageInt32Field(message, field);
}

void SetB2BGeofencingCreateEventRequest_Platform_RawValue(B2BGeofencingCreateEventRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [B2BGeofencingCreateEventRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:B2BGeofencingCreateEventRequest_FieldNumber_Platform];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t B2BGeofencingCreateEventRequest_Transition_RawValue(B2BGeofencingCreateEventRequest *message) {
  GPBDescriptor *descriptor = [B2BGeofencingCreateEventRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:B2BGeofencingCreateEventRequest_FieldNumber_Transition];
  return GPBGetMessageInt32Field(message, field);
}

void SetB2BGeofencingCreateEventRequest_Transition_RawValue(B2BGeofencingCreateEventRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [B2BGeofencingCreateEventRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:B2BGeofencingCreateEventRequest_FieldNumber_Transition];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - B2BGeofencingCreateEventResponse

@implementation B2BGeofencingCreateEventResponse

@dynamic success;
@dynamic id_p;
@dynamic errors, errors_Count;

typedef struct B2BGeofencingCreateEventResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSMutableDictionary *errors;
} B2BGeofencingCreateEventResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = B2BGeofencingCreateEventResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = B2BGeofencingCreateEventResponse_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(B2BGeofencingCreateEventResponse__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "errors",
        .dataTypeSpecific.className = NULL,
        .number = B2BGeofencingCreateEventResponse_FieldNumber_Errors,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(B2BGeofencingCreateEventResponse__storage_, errors),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[B2BGeofencingCreateEventResponse class]
                                     rootClass:[B2BGeofencingGeofencingRoot class]
                                          file:B2BGeofencingGeofencingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(B2BGeofencingCreateEventResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - B2BGeofencingListGeofencesRequest

@implementation B2BGeofencingListGeofencesRequest


typedef struct B2BGeofencingListGeofencesRequest__storage_ {
  uint32_t _has_storage_[1];
} B2BGeofencingListGeofencesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[B2BGeofencingListGeofencesRequest class]
                                     rootClass:[B2BGeofencingGeofencingRoot class]
                                          file:B2BGeofencingGeofencingRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(B2BGeofencingListGeofencesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - B2BGeofencingListGeofencesResponse

@implementation B2BGeofencingListGeofencesResponse

@dynamic geofencesArray, geofencesArray_Count;

typedef struct B2BGeofencingListGeofencesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *geofencesArray;
} B2BGeofencingListGeofencesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "geofencesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(B2BGeofencingGeofence),
        .number = B2BGeofencingListGeofencesResponse_FieldNumber_GeofencesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(B2BGeofencingListGeofencesResponse__storage_, geofencesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[B2BGeofencingListGeofencesResponse class]
                                     rootClass:[B2BGeofencingGeofencingRoot class]
                                          file:B2BGeofencingGeofencingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(B2BGeofencingListGeofencesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - B2BGeofencingGeofence

@implementation B2BGeofencingGeofence

@dynamic id_p;
@dynamic name;
@dynamic startDate;
@dynamic endDate;
@dynamic hasLocation, location;
@dynamic radius;

typedef struct B2BGeofencingGeofence__storage_ {
  uint32_t _has_storage_[1];
  int32_t startDate;
  int32_t endDate;
  uint32_t radius;
  NSString *id_p;
  NSString *name;
  B2BTypeLocation *location;
} B2BGeofencingGeofence__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = B2BGeofencingGeofence_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(B2BGeofencingGeofence__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = B2BGeofencingGeofence_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(B2BGeofencingGeofence__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startDate",
        .dataTypeSpecific.className = NULL,
        .number = B2BGeofencingGeofence_FieldNumber_StartDate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(B2BGeofencingGeofence__storage_, startDate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "endDate",
        .dataTypeSpecific.className = NULL,
        .number = B2BGeofencingGeofence_FieldNumber_EndDate,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(B2BGeofencingGeofence__storage_, endDate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(B2BTypeLocation),
        .number = B2BGeofencingGeofence_FieldNumber_Location,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(B2BGeofencingGeofence__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "radius",
        .dataTypeSpecific.className = NULL,
        .number = B2BGeofencingGeofence_FieldNumber_Radius,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(B2BGeofencingGeofence__storage_, radius),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[B2BGeofencingGeofence class]
                                     rootClass:[B2BGeofencingGeofencingRoot class]
                                          file:B2BGeofencingGeofencingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(B2BGeofencingGeofence__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
