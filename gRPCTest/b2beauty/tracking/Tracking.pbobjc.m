// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: b2beauty/tracking/tracking.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import <B2Beauty-ProtoRPC/Tracking.pbobjc.h>
 #import <B2Beauty-ProtoRPC/Location.pbobjc.h>
 #import <B2Beauty-ProtoRPC/DevicePlatform.pbobjc.h>
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - B2BTrackingTrackingRoot

@implementation B2BTrackingTrackingRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - B2BTrackingTrackingRoot_FileDescriptor

static GPBFileDescriptor *B2BTrackingTrackingRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"b2beauty.tracking"
                                                 objcPrefix:@"B2BTracking"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum B2BTrackingAction

GPBEnumDescriptor *B2BTrackingAction_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Signup\000Appointment\000";
    static const int32_t values[] = {
        B2BTrackingAction_Signup,
        B2BTrackingAction_Appointment,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(B2BTrackingAction)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:B2BTrackingAction_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL B2BTrackingAction_IsValidValue(int32_t value__) {
  switch (value__) {
    case B2BTrackingAction_Signup:
    case B2BTrackingAction_Appointment:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - B2BTrackingUserLocationRequest

@implementation B2BTrackingUserLocationRequest

@dynamic platform;
@dynamic hasLocation, location;
@dynamic action;
@dynamic userId;
@dynamic businessId;
@dynamic appointmentId;

typedef struct B2BTrackingUserLocationRequest__storage_ {
  uint32_t _has_storage_[1];
  B2BTypeDevicePlatform platform;
  B2BTrackingAction action;
  B2BTypeLocation *location;
  NSString *userId;
  NSString *businessId;
  NSString *appointmentId;
} B2BTrackingUserLocationRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "platform",
        .dataTypeSpecific.enumDescFunc = B2BTypeDevicePlatform_EnumDescriptor,
        .number = B2BTrackingUserLocationRequest_FieldNumber_Platform,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(B2BTrackingUserLocationRequest__storage_, platform),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = GPBStringifySymbol(B2BTypeLocation),
        .number = B2BTrackingUserLocationRequest_FieldNumber_Location,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(B2BTrackingUserLocationRequest__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "action",
        .dataTypeSpecific.enumDescFunc = B2BTrackingAction_EnumDescriptor,
        .number = B2BTrackingUserLocationRequest_FieldNumber_Action,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(B2BTrackingUserLocationRequest__storage_, action),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = B2BTrackingUserLocationRequest_FieldNumber_UserId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(B2BTrackingUserLocationRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "businessId",
        .dataTypeSpecific.className = NULL,
        .number = B2BTrackingUserLocationRequest_FieldNumber_BusinessId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(B2BTrackingUserLocationRequest__storage_, businessId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appointmentId",
        .dataTypeSpecific.className = NULL,
        .number = B2BTrackingUserLocationRequest_FieldNumber_AppointmentId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(B2BTrackingUserLocationRequest__storage_, appointmentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[B2BTrackingUserLocationRequest class]
                                     rootClass:[B2BTrackingTrackingRoot class]
                                          file:B2BTrackingTrackingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(B2BTrackingUserLocationRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t B2BTrackingUserLocationRequest_Platform_RawValue(B2BTrackingUserLocationRequest *message) {
  GPBDescriptor *descriptor = [B2BTrackingUserLocationRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:B2BTrackingUserLocationRequest_FieldNumber_Platform];
  return GPBGetMessageInt32Field(message, field);
}

void SetB2BTrackingUserLocationRequest_Platform_RawValue(B2BTrackingUserLocationRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [B2BTrackingUserLocationRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:B2BTrackingUserLocationRequest_FieldNumber_Platform];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t B2BTrackingUserLocationRequest_Action_RawValue(B2BTrackingUserLocationRequest *message) {
  GPBDescriptor *descriptor = [B2BTrackingUserLocationRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:B2BTrackingUserLocationRequest_FieldNumber_Action];
  return GPBGetMessageInt32Field(message, field);
}

void SetB2BTrackingUserLocationRequest_Action_RawValue(B2BTrackingUserLocationRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [B2BTrackingUserLocationRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:B2BTrackingUserLocationRequest_FieldNumber_Action];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - B2BTrackingUserLocationResponse

@implementation B2BTrackingUserLocationResponse

@dynamic success;
@dynamic id_p;
@dynamic errors, errors_Count;

typedef struct B2BTrackingUserLocationResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSMutableDictionary *errors;
} B2BTrackingUserLocationResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = B2BTrackingUserLocationResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = B2BTrackingUserLocationResponse_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(B2BTrackingUserLocationResponse__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "errors",
        .dataTypeSpecific.className = NULL,
        .number = B2BTrackingUserLocationResponse_FieldNumber_Errors,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(B2BTrackingUserLocationResponse__storage_, errors),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[B2BTrackingUserLocationResponse class]
                                     rootClass:[B2BTrackingTrackingRoot class]
                                          file:B2BTrackingTrackingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(B2BTrackingUserLocationResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
